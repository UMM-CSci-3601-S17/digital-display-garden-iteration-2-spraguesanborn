package umm3601;

import com.google.zxing.WriterException;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import umm3601.flower.ExcelParser;
import umm3601.flower.QRCodeMaker;
import umm3601.user.UserController;
import umm3601.flower.FlowerController;

import javax.servlet.MultipartConfigElement;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static spark.Spark.*;


public class Server {
    public static void main(String[] args) throws IOException, WriterException {

        ExcelParser excelParser = new ExcelParser(false);
        excelParser.parseExcel();

        MongoClient mongoClient = new MongoClient();
        MongoDatabase ddg = mongoClient.getDatabase("ddg");
        MongoCollection plants = ddg.getCollection("flowers");
        MongoCollection beds = ddg.getCollection("beds");
        List<String> bedNames = new ArrayList<String>();

        FindIterable<Map<String, Object>> bedDoc = beds.find();

        for (Map bed : bedDoc){
            bedNames.add(bed.get("gardenLocation").toString());
        }

        QRCodeMaker qrCodeMaker = new QRCodeMaker(bedNames);



        // This users looks in the folder `public` for the static web artifacts,
        // which includes all the HTML, CSS, and JS files generated by the Angular
        // build. This `public` directory _must_ be somwhere in the classpath;
        // a problem which is resolved in `server/build.gradle`.
        staticFiles.location("/public");

        UserController userController = new UserController("ddg");
        FlowerController flowerController = new FlowerController("ddg");

        options("/*", (request, response) -> {

            String accessControlRequestHeaders = request.headers("Access-Control-Request-Headers");
            if (accessControlRequestHeaders != null) {
                response.header("Access-Control-Allow-Headers", accessControlRequestHeaders);
            }

            String accessControlRequestMethod = request.headers("Access-Control-Request-Method");
            if (accessControlRequestMethod != null) {
                response.header("Access-Control-Allow-Methods", accessControlRequestMethod);
            }
 
            return "OK";
        });

        before((request, response) -> response.header("Access-Control-Allow-Origin", "*"));

        // Simple example route
        get("/hello", (req, res) -> "Hello World");

        // Redirects for the "home" page
        redirect.get("", "/");
        redirect.get("/", "http://localhost:9000");

        // List users
        get("api/users", (req, res) -> {
            res.type("application/json");
            return userController.listUsers(req.queryMap().toMap());
        });

        // See specific user
        get("api/users/:id", (req, res) -> {
            res.type("application/json");
            String id = req.params("id");
            return userController.getUser(id);
        });


        // List beds
        get("api/beds", (req, res) -> {
            res.type("application/json");
            return flowerController.listBeds();
        });

        // List flowers
        get("api/flowers", (req, res) -> {
            res.type("application/json");
            return flowerController.listFlowers(req.queryMap().toMap());
        });

        // Get a flower
        get("api/flowers/:id", (req, res) -> {
            res.type("application/json");
            String id = req.params("id");
            return flowerController.getFlower(id);
        });

        post("api/flowers/postComment", (req, res) -> {
            res.type("application/json");
            return flowerController.postComment(req.body());
        });

        put("api/flowers/thumbsUp", (req, res) -> {
            res.type("application/json");
            return flowerController.incrementLikes(req.body());
        });

        put("api/flowers/flowerVisits", (req, res) -> {
            res.type("application/json");
            return flowerController.incrementVisits(req.body());
        });

        post("/newFile", "multipart/form-data", (request, response) -> {

            String location = "/home/blask017/IdeaProjects/digital-display-garden-iteration-2-spraguesanborn/server/src/main/resources";          // the directory location where files will be stored
            long maxFileSize = 100000000;       // the maximum size allowed for uploaded files
            long maxRequestSize = 100000000;    // the maximum size allowed for multipart/form-data requests
            int fileSizeThreshold = 1024;       // the size threshold after which files will be written to disk

            MultipartConfigElement multipartConfigElement = new MultipartConfigElement(
                    location, maxFileSize, maxRequestSize, fileSizeThreshold);
            request.raw().setAttribute("org.eclipse.jetty.multipartConfig",
                    multipartConfigElement);

            Collection<Part> parts = request.raw().getParts();
            for (Part part : parts) {
                System.out.println("Name: " + part.getName());
                System.out.println("Size: " + part.getSize());
                System.out.println("Filename: " + part.getSubmittedFileName());
            }

            String fName = request.raw().getPart("file").getSubmittedFileName();
            System.out.println("Title: " + request.raw().getParameter("title"));
            System.out.println("File: " + fName);

            Part uploadedFile = request.raw().getPart("file");
            Path out = Paths.get("image/" + fName);
            try (final InputStream in = uploadedFile.getInputStream()) {
                Files.copy(in, out);
                uploadedFile.delete();
            }
// cleanup
            multipartConfigElement = null;
            parts = null;
            uploadedFile = null;

            return "OK";
        });

        // Get average ages by company
        get("api/avgUserAgeByCompany", (req, res) -> {
            res.type("application/json");
            return userController.getAverageAgeByCompany();
        });

        // Handle "404" file not found requests:
        notFound((req, res) -> {
            res.type("text");
            res.status(404);
            return "Sorry, we couldn't find that!";
        });

    }

}
